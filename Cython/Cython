
################################################################################
##########  UTILIATION DE CYTHON POUR AMÉLIORER LE CODE PYTHON !!!!!  ##########
################################################################################



#############  LIBRAIRIE  #############################

Choix 1 : Obtenir une librairie pour un autre fichier python
    Etape 1 : Transformer nomFichier.py en nomFichier.pyx
    Etape 2 : Transformer le code en C
        ----> obtention d'un *.c
        cython nomFichier.py(x) nomNouveauFichier.c
    Etape 3 : Compiler la librairie
        ----> obtention *.so
        gcc hello.c -o hello.so -shared -pthread -fPIC -fwrapv -O4 -Wall -fno-strict-aliasing $(pkg-config python3 --cflags)
        gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -fno-strict-aliasing -I/usr/include/python3.3 -o hello.so hello.c



#############  ÉXÉCUTABLE  ############################

Choix 2 : Création d'un exécutable dépendant seulement de la librairie python et non Python lui-même
    Etape 1 : Transformer nomFichier.py en nomFichier.pyx
    Etape 2 : Intégrer l'exécutable python dans la fonction main
        ----> obtention d'un *.c
        cython --embed nomFichier.py(x) -o nomFichier.c
    Etape 3 : Compiler la source
        ----> obtention d'un fichier exécutable
        gcc nomFichier.c -o nomFichierExécutable $(pkg-config python3 --cflags) -lpython3.3m




#############  ASTUCES  ################################

// L'étape 1 n'est pas indispenable mais améliore la vitesse du code compilé

// Utiliser les améliorations afin de préparer le code augmente grandement la rapidité
#Exemple d'amélioration : Préparation d'une fonction pour transformation en C
cpdef int fibo(int n):
        if n == 0 or n == 1:
                return n
        return fibo(n-2) + fibo(n-
